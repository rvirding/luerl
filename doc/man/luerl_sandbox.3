.\" Automatically generated by Pandoc 3.1.6.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "luerl_sandbox" "3" "2023" "" ""
.hy
.SH Name
.PP
luerl_sandbox - Fuctions for sandboxing Luerl evaluation
.SH Interface Functions
.PP
The \f[B]Lua State\f[R] parameter is the state of a Lua VM instance.
It must be created with the \f[B]luerl:init()\f[R] call and be carried
from one call to the next.
.PP
As it is possible in Lua to create self-referencing data structures,
indeed the standard libraries have many instances of this, then using
the functions which decode their return values will generate an error
when they would cause an infinite loop during the decoding.
An simple example is the top level table which contains a key
\f[B]\f[VB]_G\f[B]\f[R] which references the top-level table.
.PP
Note that Lua \f[B]Chunks\f[R] (see definition below) can travel between
different States.
They are precompiled bits of code, independent of State.
That you can `carry around' this is no unique to Luerl but a low-level
implementation detail of the standard Lua language (https://lua.org),
for more on chunks
read (https://www.lua.org/manual/5.3/manual.html#3.3.2) the official Lua
5.3 reference manual (https://www.lua.org/manual/5.3/manual.html).
.SS Spec Definitions
.PP
\f[B]Binary\f[R] means an Erlang binary string.
.PD 0
.P
.PD
\f[B]Chunks\f[R] means a portion of precompiled bytecode.
.PD 0
.P
.PD
\f[B]State\f[R] means a Lua State, this \f[I]is\f[R] a Lua VM instance.
.PD 0
.P
.PD
\f[B]Path\f[R] means a file system path and file name.
.PD 0
.P
.PD
\f[B]KeyPath\f[R] means an Erlang list of \f[B]atoms\f[R] representing
nested names, e.g.\ [table,pack] for table.pack.
.PD 0
.P
.PD
\f[B]Keys\f[R] means Lua table keys, the keys of a key-value structure.
.SS Functions
.SS init() -> State.
.SS init([ State | TablePaths]) -> State.
.SS init(State, TablePaths) -> State.
.PP
Create a new sandboxed state.
If a state is given as an argument then that state will be used
otherwise a new default be be generated.
\f[V]TablePaths\f[R] is a list of paths to functions which will be
blocked.
If none is given then the default list will be used.
.SS run(String | Binary) -> {Result, State} | {error, Reason}.
.SS run(String | Binary, State) -> {Result, State} | {error, Reason}.
.SS run(String | Binary, Flags, State) -> {Result, State} | {error, Reason}.
.PP
Spawn a new process which runs the string \f[V]String\f[R] in
\f[V]State\f[R] where the default sandbox state will be used if none is
given.
\f[V]Flags\f[R] is a map or keyword list which can contain the following
fields
.IP
.nf
\f[C]
#{max_time => MaxTime,
  max_reductions => MaxReds,
  spawn_opts => SpawnOpts}
\f[R]
.fi
.PP
\f[V]MaxReds\f[R] limits the number of reductions and \f[V]MaxTime\f[R]
(default 100 msecs) the time to run the string, \f[V]SpawnOpts\f[R] are
spawn options to the process running the evaluation.
.SS run(String | Binary) -> {Result, State} | {error, Reason}.
.SS run(String | Binary, State) -> {Result, State} | {error, Reason}.
.SS run(String | Binary, State, [ MexReds | Flags ]) -> {Result, State} | {error, Reason}.
.SS run(String | Binary, State, MexReds, Flags) -> {Result, State} | {error, Reason}.
.SS run(String | Binary, State, MexReds, Flags, Timeout) -> {Result, State} | {error, Reason}.
.PP
This is the old interface to run.
It still works but the new interface is recommended.
Spawn a new process which runs the string \f[V]String\f[R] in
\f[V]State\f[R] where the default sandbox state will be used if none is
given.
\f[V]MaxReds\f[R] limits the number of reductions and \f[V]TimeOut\f[R]
(default 100 msecs) the time to run the string, \f[V]Flags\f[R] are
spawn options to the process running the evaluation.
.SH AUTHORS
Robert Virding.
