.\" Automatically generated by Pandoc 3.6
.\"
.TH "luerl_old" "3" "2018\-2024" ""
.SH Name
luerl \- The old original interface to the Luerl system
.SH Interface functions
The \f[B]Lua State\f[R] parameter is the state of a Lua VM instance.
It must be created with the \f[B]luerl:init()\f[R] call and be carried
from one call to the next.
.PP
As it is possible in Lua to create self\-referencing data structures,
indeed the standard libraries have many instances of this, then using
the functions which decode their return values will generate an error
when they would cause an infinite loop during the decoding.
An simple example is the top level table which contains a key
\f[B]\f[CB]_G\f[B]\f[R] which references the top\-level table.
.PP
Note that Lua \f[B]Chunks\f[R] (see definition below) can travel between
different States.
They are precompiled bits of code, independent of State.
That you can `carry around' this is no unique to Luerl but a low\-level
implementation detail of the standard Lua \c
.UR https://lua.org
language
.UE \c
, for more on chunks \c
.UR https://www.lua.org/manual/5.3/manual.html#3.3.2
read
.UE \c
\ the official Lua 5.3 \c
.UR https://www.lua.org/manual/5.3/manual.html
reference manual
.UE \c
\&.
.SS Spec Definitions
\f[B]Binary\f[R] means an Erlang binary string.
.PD 0
.P
.PD
\f[B]Chunks\f[R] means a portion of precompiled bytecode.
.PD 0
.P
.PD
\f[B]State\f[R] means a Lua State, this \f[I]is\f[R] a Lua VM instance.
.PD 0
.P
.PD
\f[B]Path\f[R] means a file system path and file name.
.PD 0
.P
.PD
\f[B]KeyPath\f[R] means an Erlang list of \f[B]atoms\f[R] representing
nested names, e.g.\ [table,pack] for table.pack.
.PD 0
.P
.PD
\f[B]Keys\f[R] means Lua table keys, the keys of a key\-value structure.
.SS Functions
\f[B]eval\f[R] and \f[B]do\f[R] functions differ only in what they
return.
The \f[B]do\f[R] functions return results and a new Lua State, the
\f[B]eval\f[R] functions return a tuple starting on `ok' or `error',
then the result, or cause of error.
.IP
.EX
do \-\-> {Result, State} 

eval \-\-> {ok, Result} | {error, Reason}
.EE
.SS luerl:eval(String|Binary|Form, State) \-> {ok, Result} | {error, Reason, StackTrace}.
Evaluate a Lua expression passed in as a string or binary, and return
its result.
.SS luerl:evalfile(Path, State) \-> {ok, Result} | {error, Reason, StackTrace}.
Load and execute a file, and return the result.
.SS luerl:do(String|Binary|Form, State) \-> {Result, NewState}.
Evaluate a Lua expression and return its result, and the new Lua State.
.SS luerl:dofile(Path, State) \-> {Result, NewState}.
Load and execute the Lua code in the file and return its result, and the
new Lua State.
Equivalent to doing luerl:do(\[lq]return dofile(`FileName')\[rq]).
.SS luerl:load(String|Binary[, CompileOptions], State) \-> {ok,Function,NewState} | {error, Reason}.
Parse a Lua chunk as string or binary, and return a compiled chunk
(`form').
.SS luerl:loadfile(FileName[, CompileOptions], State) \-> {ok,Function,NewState} | {error, Reason}.
Parse a Lua file, and return a compiled chunk (`form').
.SS luerl:path_loadfile([Path, ], FileName[, CompileOptions], State) \-> {ok,Function,FullName,State} | {error, Reason}.
Search Path until the file FileName is found.
Parse the file and return a compiled chunk (`form').
If Path is not given then the path defined in the environment variable
LUA_LOAD_PATH is used.
.SS luerl:load_module(KeyPath, ErlangModule, State) \-> State.
Load \f[CR]ErlangModule\f[R] and install its table at \f[CR]KeyPath\f[R]
which is encoded.
.SS luerl:load_module1(KeyPath, ErlangModule, State) \-> State.
Load \f[CR]ErlangModule\f[R] and install its table at \f[CR]KeyPath\f[R]
which is \f[B]NOT\f[R] encoded
.SS luerl:init() \-> State.
Get a new Lua State = a fresh Lua VM instance.
.SS luerl:call(Form, Args, State) \-> {Result,State}
.SS luerl:call_chunk(Form, Args, State) \-> {Result,State}
Call a compiled chunk or function.
Use the call_chunk, call has been kept for backwards compatibility.
.SS luerl:call_function(KeyPath, Args, State) \-> {Result,NewState}
Call a function already defined in the state.
\f[CR]KeyPath\f[R] is a list of names to the function.
\f[CR]KeyPath\f[R], \f[CR]Args\f[R] and \f[CR]Result\f[R] are
automatically encoded/decoded.
.SS luerl:call_function1(KeyPath, Args, State) \-> {Result,NewState}
Call a function already defined in the state.
\f[CR]KeyPath\f[R] is a list of keys to the function.
\f[CR]KeyPath\f[R], \f[CR]Args\f[R] and \f[CR]Result\f[R] are
\f[B]NOT\f[R] encoded/decoded.
.SS luerl:call_method(MethPath, Args, State) \-> {Result,NewState}.
Call a method already defined in the state.
\f[CR]MethPath\f[R] is a list of names to the method.
\f[CR]MethPath\f[R], \f[CR]Args\f[R] and \f[CR]Result\f[R] are
automatically encoded/decoded.
.SS luerl:call_method1(MethPath, Args, State) \-> {Result,NewState}
Call a method already defined in the state.
\f[CR]MethPath\f[R] is a list of keys to the method.
\f[CR]Keys\f[R], \f[CR]Args\f[R] and \f[CR]Result\f[R] are \f[B]NOT\f[R]
encoded/decoded.
.SS luerl:stop(State) \-> GCedState.
Garbage collects the state and (todo:) does away with it.
.SS luerl:gc(State) \-> State.
Runs the garbage collector on a state and returns the new state.
.SS luerl:set_table(KeyPath, Value, State) \-> State.
Sets a value inside the Lua state.
Value is automatically encoded.
.SS luerl:set_table1(KeyPath, Value, State) \-> State.
Sets a value inside the Lua state.
\f[CR]KeyPath\f[R] and \f[CR]Value\f[R] are \f[B]NOT\f[R] encoded.
.SS luerl:get_table(KeyPath, State) \-> {Result,State}.
Gets a value inside the Lua state.
\f[CR]KeyPath\f[R] and \f[CR]Result\f[R] are automatically encoded.
.SS luerl:get_table1(KeyPath, State) \-> {Result,State}.
Gets a value inside the Lua state.
\f[CR]KeyPath\f[R] and \f[CR]Result\f[R] are \f[B]NOT\f[R]
encoded/decoded.
.PP
You can use this function to expose an function to the Lua code by using
this interface: \f[CR]fun(Args, State) \-> {Results, State}\f[R]
.PP
Args and Results must be a list of Luerl compatible Erlang values.
.SH AUTHORS
Jean Chassoul, Robert Virding.
